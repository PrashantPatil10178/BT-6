"use strict";

const express = require("express");
const path = require("path");
const fs = require("fs");
const { Gateway, Wallets } = require("fabric-network");

const app = express();
const PORT = 3000;

app.use(express.json());
app.use(express.static("public"));

// Path to Org1 connection profile (generated by test-network)
const ccpPath = path.resolve(
  __dirname,
  "fabric-samples",
  "test-network",
  "organizations",
  "peerOrganizations",
  "org1.example.com",
  "connection-org1.json"
);

const ccp = JSON.parse(fs.readFileSync(ccpPath, "utf8"));
const walletPath = path.join(process.cwd(), "wallet");

// Helper: read first file from a directory (used to get private key filename)
function readFirstFile(dir) {
  const files = fs.readdirSync(dir);
  if (!files || files.length === 0) {
    throw new Error(`No files found in directory: ${dir}`);
  }
  return fs.readFileSync(path.join(dir, files[0])).toString();
}

// Import admin identity from cryptogen output (no CA)
app.post("/api/enroll-admin", async (req, res) => {
  try {
    const wallet = await Wallets.newFileSystemWallet(walletPath);

    const existing = await wallet.get("admin");
    if (existing) {
      return res.json({ success: true, message: "Admin identity already exists" });
    }

    const adminMspPath = path.join(
      __dirname,
      "fabric-samples",
      "test-network",
      "organizations",
      "peerOrganizations",
      "org1.example.com",
      "users",
      "Admin@org1.example.com",
      "msp"
    );

    const certPath = path.join(adminMspPath, "signcerts", "Admin@org1.example.com-cert.pem");
    const keyDir = path.join(adminMspPath, "keystore");

    const certificate = fs.readFileSync(certPath).toString();
    const privateKey = readFirstFile(keyDir);

    const x509Identity = {
      credentials: { certificate, privateKey },
      mspId: "Org1MSP",
      type: "X.509",
    };

    await wallet.put("admin", x509Identity);

    res.json({ success: true, message: "Admin identity imported from cryptogen material" });
  } catch (error) {
    console.error(`Failed to import admin: ${error}`);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Import a user identity from cryptogen output (no CA). Uses User1@org1.example.com
app.post("/api/register-user", async (req, res) => {
  try {
    const wallet = await Wallets.newFileSystemWallet(walletPath);

    const existing = await wallet.get("appUser");
    if (existing) {
      return res.json({ success: true, message: "appUser identity already exists" });
    }

    const userMspPath = path.join(
      __dirname,
      "fabric-samples",
      "test-network",
      "organizations",
      "peerOrganizations",
      "org1.example.com",
      "users",
      "User1@org1.example.com",
      "msp"
    );

    const certPath = path.join(userMspPath, "signcerts", "User1@org1.example.com-cert.pem");
    const keyDir = path.join(userMspPath, "keystore");

    const certificate = fs.readFileSync(certPath).toString();
    const privateKey = readFirstFile(keyDir);

    const x509Identity = {
      credentials: { certificate, privateKey },
      mspId: "Org1MSP",
      type: "X.509",
    };

    await wallet.put("appUser", x509Identity);

    res.json({ success: true, message: "appUser identity imported from cryptogen material" });
  } catch (error) {
    console.error(`Failed to import user: ${error}`);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Query all assets using appUser
app.get("/api/query-assets", async (req, res) => {
  try {
    const wallet = await Wallets.newFileSystemWallet(walletPath);
    const identity = await wallet.get("appUser");

    if (!identity) {
      return res.status(400).json({
        success: false,
        error: "User identity not found. Import appUser first.",
      });
    }

    const gateway = new Gateway();
    await gateway.connect(ccp, {
      wallet,
      identity: "appUser",
      discovery: { enabled: true, asLocalhost: true },
    });

    // ðŸ‘‡ Channel name changed here
    const network = await gateway.getNetwork("channel");
    const contract = network.getContract("basic");

    const result = await contract.evaluateTransaction("GetAllAssets");
    await gateway.disconnect();

    res.json({ success: true, data: JSON.parse(result.toString()) });
  } catch (error) {
    console.error(`Query failed: ${error}`);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Create an asset using appUser
app.post("/api/create-asset", async (req, res) => {
  try {
    const { id, color, size, owner, appraisedValue } = req.body;

    if (!id || !color || !size || !owner || !appraisedValue) {
      return res.status(400).json({ success: false, error: "All fields are required" });
    }

    const wallet = await Wallets.newFileSystemWallet(walletPath);
    const identity = await wallet.get("appUser");

    if (!identity) {
      return res.status(400).json({
        success: false,
        error: "User identity not found. Import appUser first.",
      });
    }

    const gateway = new Gateway();
    await gateway.connect(ccp, {
      wallet,
      identity: "appUser",
      discovery: { enabled: true, asLocalhost: true },
    });

    // ðŸ‘‡ Channel name changed here
    const network = await gateway.getNetwork("channel");
    const contract = network.getContract("basic");

    await contract.submitTransaction("CreateAsset", id, color, size, owner, appraisedValue);
    await gateway.disconnect();

    res.json({ success: true, message: "Asset created successfully" });
  } catch (error) {
    console.error(`Create asset failed: ${error}`);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Wallet status
app.get("/api/wallet-status", async (req, res) => {
  try {
    const wallet = await Wallets.newFileSystemWallet(walletPath);
    const adminIdentity = await wallet.get("admin");
    const userIdentity = await wallet.get("appUser");

    res.json({
      success: true,
      admin: !!adminIdentity,
      appUser: !!userIdentity,
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
